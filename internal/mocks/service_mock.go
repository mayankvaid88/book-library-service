// Code generated by MockGen. DO NOT EDIT.
// Source: internal/book/service.go

// Package mock_book is a generated GoMock package.
package mock_book

import (
	book "book-store/internal/book"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookService is a mock of BookService interface.
type MockBookService struct {
	ctrl     *gomock.Controller
	recorder *MockBookServiceMockRecorder
}

// MockBookServiceMockRecorder is the mock recorder for MockBookService.
type MockBookServiceMockRecorder struct {
	mock *MockBookService
}

// NewMockBookService creates a new mock instance.
func NewMockBookService(ctrl *gomock.Controller) *MockBookService {
	mock := &MockBookService{ctrl: ctrl}
	mock.recorder = &MockBookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookService) EXPECT() *MockBookServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookService) Create(ctx context.Context, req book.CreateOrUpdateBookRequest) (int64, *book.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*book.ErrorResponse)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookServiceMockRecorder) Create(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookService)(nil).Create), ctx, req)
}

// CreateOrUpdate mocks base method.
func (m *MockBookService) CreateOrUpdate(ctx context.Context, id int, req book.CreateOrUpdateBookRequest) (int64, *book.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, id, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(*book.ErrorResponse)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockBookServiceMockRecorder) CreateOrUpdate(ctx, id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockBookService)(nil).CreateOrUpdate), ctx, id, req)
}

// Delete mocks base method.
func (m *MockBookService) Delete(ctx context.Context, id int) *book.ErrorResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(*book.ErrorResponse)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookServiceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBookService)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockBookService) Get(ctx context.Context, id int) (book.Book, *book.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(book.Book)
	ret1, _ := ret[1].(*book.ErrorResponse)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBookServiceMockRecorder) Get(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBookService)(nil).Get), ctx, id)
}

// List mocks base method.
func (m *MockBookService) List(ctx context.Context, limit, offset int) ([]book.Book, int, *book.ErrorResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, limit, offset)
	ret0, _ := ret[0].([]book.Book)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(*book.ErrorResponse)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockBookServiceMockRecorder) List(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBookService)(nil).List), ctx, limit, offset)
}
